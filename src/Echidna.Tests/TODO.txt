Templating:

Add support for injecting IN clauses ala dapper. The trick is handling empty:
	- SQL Server can use (SELECT TOP 0 NULL)
	- MySql can use (SELECT NULL FROM (SELECT 0) WHERE FALSE)
	- Postgres can use an array parameter (select * FROM unnest($1))
	- Oracle can use (SELECT NULL FROM sys.dual WHERE 1 = 0)
	- Could also use a SqlTemplate function $"select * from x where id {In(values)}". This would let Postgres use ALL/ANY

Mapping:

Mapping delegate should have a target, even if null because that's faster. For a dynamic row it might be a RowSchema object or similar but
	in other cases it could just be null every time; it's still faster.

Forbid Read<object> since object is ambiguous (could be Expando to support dynamic or any scalar) OR have Row type

Leverage C#7 nullabilityinfocontext as that evolves.

Consider avoiding assigning null to properties/fields where we don't need to (see https://github.com/DapperLib/Dapper/blob/main/Dapper/SqlMapper.Settings.cs)

Row type
	* Dynamic support?
	* IReadOnlyDictionary<string, object> backed by array of values plus pointer to shared class which does name -> index lookups
	* IReadOnlyList<object>
	* Could leverage union array under the hood to avoid boxing (see https://github.com/dotnet/SqlClient/blob/main/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlBuffer.cs)
	* Could offer Get<T>(string|int) which doesn't box and leverages ScalarConverter under the hood. When we don't need the converter, we can either use
		branching like this https://github.com/dotnet/SqlClient/blob/main/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlDataReader.cs#L2796 or
		we can use Unsafe.As<Storage, T>(ref storage) to reinterpret the storage as a T value.
	* Could implement IDataRecord to permit "reflection" type operations
	* Handles duplicate keys, returning the first index by default. GetValues(key) returns all values (returns a RowValues struct which is IROL<object> but also has Get<T>(int)).
		Internal implementation stores 2 indices plus a nullable int[] of more indices to optimize common cases

Whole-row types:
* Records (constructor + property name-based binding)
	(includes anonymous types, pocos)
* Dictionary, ExpandoObject, IDictionary, IROD
	key must be string or object. Value is type-bound
* ValueTuple (position-based binding or unique type-based binding)
* Array (position + type binding)

Source generation:
* See https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.cookbook.md
* Will generate a method in the source whose signature is MappingDelegate<SomeType> CreateMapperForSomeType(ReadOnlyMemory<Type> columnTypes, ReadOnlyMemoryType<ColumnNames>)
	- delegate T MappingDelegate<T>(DbDataReader reader)
* How does Echidna become aware of this? Probably the simplest way is to generate a module initializer (https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers)
	- registers each source-generated mapper with Echidna's global config on module init
	- probably should also have an option to make this a manual call only / expose the manual call
* How do users opt in?
	- Class attribute [EchidnaGenerateMapper]
	- Assembly attribute [assembly: EchidnaGenerateMapper(typeof((int, string)))]

General:

* Support direct sproc execution probably a separate method that just uses CommandBehavior.Sproc and takes in the parameters

* Consider SingleRow optimization for ReadFirst (see https://github.com/DapperLib/Dapper/blob/main/Dapper/SqlMapper.Settings.cs)

* FUTURE: can we leverage StringSyntaxAttribute (https://github.com/dotnet/runtime/issues/62505) for SQL?

Other Ideas:

Note: DbDataREader.ReadAsync() returns a completed task most of the time. For bulk reads therefore we can use a dynamicmethod
for the read loop; we just generate for example a method like this:
Task<bool>? ReadListAsync(SqlDataReader reader, List<SomeType> list)
{
    while (true)
	{
		var readTask = reader.ReadAsync();
		if (!readTask.IsCompleted) { return readTask; }
		if (!readTask.GetAwaiter.GetResult()) { return null; }

		list.Add(MapRow(reader)); // MapRowFunction is also dynamic; could be manually inlined
	}
}

Then we'd call our compiled delegate like so:
var list = new List<T>();
await using var reader = cmd.ExecuteReaderAsync();
while (true)
{
	var readTask = ReadListAsync(reader, list);
	if (readTask == null || !await readTask) { break; }	
}

The benefit here is getting to inline our MapRow method and call ReadAsync() non-virtually most of the time


Mapping function form:

int index = 0;
try
{
	var val1 = MapField1();

	++index;
	var val2 = MapField2();

	++index;
	var val3 = MapField3();

	// trivial conversion is one that checks for DBNull and can't throw
	var val4 = MapTrivialField4();

	...

	++index;
	return new Type(val1, val2, val3, ...);
}
catch (Exception ex) when (index < nonTrivialFieldCount)
{
	Exception exception;
	if (index == 0) { exception = Create(...); }
	else if (index == 1) { exception = Create(...); }
	...
	else { exception = Create(...); }
	throw exception;
}